{"version":3,"sources":["interfaces/photo.ts","components/chart/chart.tsx","components/picture/picture.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tag","rows","Chart","className","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","x","Picture","photo","src","url","alt","height","width","caption","tags","freelance","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAQYA,E,uFCJNC,EAAiB,CACnB,EACA,EACA,EACA,EACA,EACA,GAGSC,EAAkB,WAC3B,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,CAAOD,UAAU,qCAAqCE,cAAc,GAChE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,sBACA,kBAACA,EAAA,EAAD,sBACA,kBAACA,EAAA,EAAD,wBAGR,kBAACC,EAAA,EAAD,KACKR,EAAKS,KAAI,SAACC,GACP,OACI,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAAYG,GACZ,kBAACH,EAAA,EAAD,KAAYG,GACZ,kBAACH,EAAA,EAAD,KAAYG,WC1B/BC,EAA2B,SAACC,GACrC,OACI,yBAAKV,UAAU,mBACX,yBAAKA,UAAU,0BACXW,IAAKD,EAAME,IACXC,IAAK,UACLC,OAAQJ,EAAMI,OACdC,MAAOL,EAAMK,QAChBL,EAAMM,W,SFJPnB,K,gBAAAA,E,uBAAAA,M,KGDZ,IAAMa,EAAe,CACnBM,QAAS,UACTJ,IAAK,gCACLK,KAAM,CACFpB,EAAIqB,WAERJ,OAAQ,IACRC,MAAO,KAaMI,MAVf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAYT,GACb,kBAAC,EAAYA,KCVCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31e6d4ac.chunk.js","sourcesContent":["export interface Photo {\n    caption: string,\n    url: string,\n    width: number,\n    height: number,\n    tags: Tag[];\n}\n\nexport enum Tag {\n    hockey = \"Hockey\",\n    freelance = \"Freelance\",\n}","import React from 'react';\nimport { Table, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core'\n\n\nconst rows: number[] = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5\n]\n\nexport const Chart: React.FC = () => {\n    return (\n        <div className=\"m-2\">\n            <Table className=\"table table-striped table-bordered\" stickyHeader={true}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Header Cell 1</TableCell>\n                        <TableCell>Header Cell 2</TableCell>\n                        <TableCell>Header Cell 3</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map((x: number) => {\n                        return (\n                            <TableRow>\n                                <TableCell>{x}</TableCell>\n                                <TableCell>{x}</TableCell>\n                                <TableCell>{x}</TableCell>\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </Table>\n            \n      </div>\n    )\n} ","import React from 'react';\nimport { Photo } from '../../interfaces/photo';\n\n\nexport const Picture: React.FC<Photo> = (photo) => {\n    return (\n        <div className=\"m-3 text-center\">\n            <img className=\"rounded mx-auto d-block\" \n                src={photo.url}\n                alt={\"Loading\"} \n                height={photo.height} \n                width={photo.width}/>\n            {photo.caption}\n        </div>\n    )\n}\n","import React, { Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Chart } from './components/chart/chart';\nimport { Picture } from './components/picture/picture';\nimport { Photo, Tag } from './interfaces/photo';\n\n\nconst photo: Photo = {\n  caption: \"Forrest\",\n  url: \"https://picsum.photos/300/300\",\n  tags: [\n      Tag.freelance,\n  ],\n  height: 300,\n  width: 300,\n}\n\nfunction App() {\n  return (\n    <Fragment>\n      <Chart />\n      <Picture {...photo} />\n      <Picture {...photo} />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}